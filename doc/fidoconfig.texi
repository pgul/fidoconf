\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename fidoconfig.info
@settitle FidoConfig Manual
@setchapternewpage odd
@c %**end of header

@ifinfo
This file documents fidoconfig.

Copyright 1998-2002 Husky Development Team

@end ifinfo

@titlepage
@title FidoConfig Manual
@subtitle a way to make your unix fido-capable
@author Matthias Tichy
@author Max Levenkov

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1998-2002 Husky Development Team

@end titlepage

@c @ifinfo

@dircategory Fidonet Software
@direntry
* Fidoconfig: (fidoconfig).     The format of the husky common config file.
@end direntry

@node Top, , , (dir)
@top fidoconfig

This document describes the use of fidoconfig to make fido work on your
favorite platform.

This document applies to version 1.4 of fidoconfig.
@c @end ifinfo

@menu
* design goals::  what we want to achieve
* config file::   how does it look like
* tparser::       testing your config
* converting::    Converting fidoconfig to golded and msged
* contact::       contacting the author
@end menu

@node design goals, config file, Top, Top
@chapter Design goals
The design goal of fidoconfig was to provide one config-file for several
different fido software packages like editor, tosser etc.
An additional aim was to have one library (fidoconfig) which can be used by
all programs.
The advantage is you only have to edit one config-file, so changing your
system is much easier than with common software packages. Also bugs can only
creep in one library and not in thousands over thousands libraries.
The config definition can be used in all operating systems. Also the library
should be quite portable.

@node config file, converting, design goals, Top
@chapter Config file

@include proposal.texi

@node converting, tparser, config file, Top
@chapter Converting fidoconfig to golded, msged and aquaed
Since original GoldEd by Odin Sorensen does not support fidoconfig at
all and msged and aquaed only in beta versions, we have developed three
programs that convert your fidoconfig to these proprietary config file
formats.

@enumerate
@item fconf2golded
fconf2golded <goldedConfigFileName> [<default.cfg>]

@example
fconf2golded ~/golded/golded.cfg ~/golded/goldDefaults.cfg
@end example

@item fconf2msged
fconf2msged <msgedConfigFileName>

@example
fconf2msged ~/msged.areas
@end example

@item fconf2aquaed
fconf2aquaed <aquaedConfigFileName> [<default.cfg>]
(if you specify default.cfg there will be a include <default.cfg> generated in
your config file)

@example
fconf2aquaed ~/aquaed/aquaed.cfg
@end example

@end enumerate

@node tparser, contact, converting, Top
@chapter Testing the config
You should run @command{tparser} @sc{everytime} you have changed the config. If tparser
found error in config please correct your config file and try again.

@table @asis
@item Syntax:
@command{tparser [-h|@minus{-help}] [-Dvar=value] [-E] [-P] [/path/to/config/file]}
@item Example:
@example
@command{tparser -Dmodule=hpt | less}
@end example
@end table

tparser (like any fidoconfig program) will display error messages if you have
made an error in the config. It also may be display some warnings about your
config settings. It will grumble on every Keyword it does not know. It will
stop after the first error (not warning) to give you the ability to change
your config.

@subsection Options

@table @asis
@item -Dvar=value
Set the config variable @code{var} to @code{value}.
@item -E
Dumps config into stdout (all config variables expanded).
@item -h
@itemx @minus{-help}
Display usage information.
@item -P
Try to create non-existing directories.
@end table


@node contact, , tparser, Top
@chapter Contacting the author
You can reach me at

@example
@email{mtt@@tichy.de}
2:2432/645
@end example

and in the fido echoarea

@example
linux.develop.ger
fidosoft.husky
@end example

Max Levenkov:
@example
@email{sackett@@mail.ru}
ru.husky (russian)
ru.echoprocessors (russian)
fidosoft.husky (english)
@end example

The actual fidoconfig library and other fido software will be on
@url{http://husky.sourceforge.net}.

@bye
